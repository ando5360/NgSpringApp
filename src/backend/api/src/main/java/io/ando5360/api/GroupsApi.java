/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Group;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-08T08:51:30.189033300+01:00[Europe/London]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "groups", description = "the groups API")
public interface GroupsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /groups : Get a list of groups
     *
     * @return A list of groups (status code 200)
     */
    @Operation(
        operationId = "groupsGet",
        summary = "Get a list of groups",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of groups", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/groups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Group>> groupsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"Management\", \"Management\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /groups/{groupId} : Delete a group by ID
     *
     * @param groupId  (required)
     * @return Group deleted successfully (status code 204)
     */
    @Operation(
        operationId = "groupsGroupIdDelete",
        summary = "Delete a group by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Group deleted successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "admin" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/groups/{groupId}"
    )
    
    default ResponseEntity<Void> groupsGroupIdDelete(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") Long groupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /groups/{groupId} : Get a group by ID
     *
     * @param groupId  (required)
     * @return A group object (status code 200)
     */
    @Operation(
        operationId = "groupsGroupIdGet",
        summary = "Get a group by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "A group object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/groups/{groupId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Group> groupsGroupIdGet(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") Long groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Management\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /groups/{groupId} : Update a group by ID
     *
     * @param groupId  (required)
     * @param body  (required)
     * @return Group updated successfully (status code 200)
     */
    @Operation(
        operationId = "groupsGroupIdPut",
        summary = "Update a group by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Group updated successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/groups/{groupId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> groupsGroupIdPut(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") Long groupId,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /groups : Create a new group
     *
     * @param body  (required)
     * @return Group created successfully (status code 201)
     */
    @Operation(
        operationId = "groupsPost",
        summary = "Create a new group",
        responses = {
            @ApiResponse(responseCode = "201", description = "Group created successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/groups",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> groupsPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
