/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.ando5360.api;

import io.ando5360.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : Get a list of users
     *
     * @return A list of users (status code 200)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Get a list of users",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> usersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"groups\" : [ null, null ], \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"groups\" : [ null, null ], \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a new user
     *
     * @param user  (required)
     * @return User created successfully (status code 201)
     */
    @Operation(
        operationId = "usersPost",
        summary = "Create a new user",
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersPost(
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete a user by ID
     *
     * @param userId  (required)
     * @return User deleted successfully (status code 204)
     */
    @Operation(
        operationId = "usersUserIdDelete",
        summary = "Delete a user by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "admin" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    default ResponseEntity<Void> usersUserIdDelete(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId} : Get a user by ID
     *
     * @param userId  (required)
     * @return A user object (status code 200)
     */
    @Operation(
        operationId = "usersUserIdGet",
        summary = "Get a user by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "A user object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersUserIdGet(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"groups\" : [ null, null ], \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId} : Update a user by ID
     *
     * @param userId  (required)
     * @param user  (required)
     * @return User updated successfully (status code 200)
     */
    @Operation(
        operationId = "usersUserIdPut",
        summary = "Update a user by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated successfully")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write" }),
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersUserIdPut(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
