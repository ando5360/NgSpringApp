/*
 * User and Group Administration API
 * API for managing users and groups
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.ando5360.middleware.dao;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Role
 */
@JsonAdapter(Role.Adapter.class)
public enum Role {
  
  CLEVEL("CLevel"),
  
  CALLCENTERMANAGER("CallCenterManager"),
  
  TEAMLEADER("TeamLeader"),
  
  QUALITYASSURANCEMANAGER("QualityAssuranceManager"),
  
  OPERATIONSMANAGER("OperationsManager"),
  
  CUSTOMERSERVICEREP("CustomerServiceRep"),
  
  TECHNICALSUPPORTAGENT("TechnicalSupportAgent"),
  
  SALESREP("SalesRep"),
  
  OUTBOUNDTELEMARKETER("OutboundTelemarketer"),
  
  ITSUPPORTSTAFF("ITSupportStaff"),
  
  NETWORKADMIN("NetworkAdmin"),
  
  DATABASEADMIN("DatabaseAdmin"),
  
  SECURITYANALYST("SecurityAnalyst"),
  
  HELPDESKTECHNICIAN("HelpDeskTechnician"),
  
  HRPERSONNEL("HRPersonnel"),
  
  PAYROLLADMIN("PayrollAdmin"),
  
  OFFICEMANAGER("OfficeManager"),
  
  ADMINASSISTANT("AdminAssistant"),
  
  TRAININGSTAFF("TrainingStaff"),
  
  WORKFORCEMANAGEMENT("WorkforceManagement"),
  
  BUSINESSANALYST("BusinessAnalyst"),
  
  DATAANALYST("DataAnalyst"),
  
  REMOTEWORKER("RemoteWorker"),
  
  CONTRACTWORKER("ContractWorker"),
  
  VENDOR("Vendor"),
  
  AUDITOR("Auditor"),
  
  REALTIMEANALYST("RealTimeAnalyst"),
  
  CALLQUALITYMONITOR("CallQualityMonitor"),
  
  KNOWLEDGEBASEADMIN("KnowledgeBaseAdmin"),
  
  CHATBOTTECHNICIAN("ChatbotTechnician"),
  
  SOFTWAREDEVELOPER("SoftwareDeveloper"),
  
  QATESTER("QATester"),
  
  PROJECTMANAGER("ProjectManager"),
  
  SYSTEMSINTEGRATOR("SystemsIntegrator");

  private String value;

  Role(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Role fromValue(String value) {
    for (Role b : Role.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Role> {
    @Override
    public void write(final JsonWriter jsonWriter, final Role enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Role read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Role.fromValue(value);
    }
  }
}

